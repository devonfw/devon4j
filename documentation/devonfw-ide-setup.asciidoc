= IDE Setup

This Tutorial explains how to setup the development environment to work on and contribute to devonfw4j with your Windows computer.

We are using a pre-configured https://github.com/devonfw/devon-ide[devon-ide] for development. To get started follow these steps:

. Get a Git client. For Windows use:
* https://gitforwindows.org/
+
Important: install with option +Use Git from the Windows Command Prompts+ but without Windows Explorer integration.
+
image::https://raw.githubusercontent.com/schowalter0112/Prints-OASP4j-Tutorial/master/Git%20hub%20client/Use%20Git%20from%20the%20Windows%20Command%20Prompts.jpg[command]
* Download TortoiseGit from https://tortoisegit.org/
+
. Download the IDE
* If you are a member of Capgemini: download https://coconet.capgemini.com/sf/go/projects.apps2_devon/frs.oasp4j_ide[devonfw ide package] or the higher integrated https://coconet.capgemini.com/sf/go/projects.apps2_devon/frs.devon_distribution[devonfw distribution] (for devonfw please find the setup guide within the devon-dist).
* If you are not member of Capgemini: We cannot distribute the package. Please consult https://github.com/devonfw/devon-ide[devon-ide] to setup and configure the IDE manually. If you need help, please get in touch.
. Choose a project location for your project (e.g. `C:\projects\devonfw`, referred to with `$projectLoc` in this setup guides following steps). Avoid long paths and white spaces to prevent trouble. Extract the downloaded ZIP files via `Extract Here` (e.g. using http://www.7-zip.org/[7-Zip]). Do not use the Windows native ZIP tool to extract as this is not working properly on long paths and filenames.
. Run the script `update-all-workspaces.bat` in `$projectLoc`.
+
image::https://raw.githubusercontent.com/schowalter0112/Prints-OASP4j-Tutorial/master/Git%20hub%20client/update.jpg[update]
+
Hint: You can use update-all-workspaces.bat whenever you created a new folder in `workspaces` to separate different workspaces. This update will create new Eclipse start batches allowing to run a number of Eclipse instances using different workspaces in parallel.  
+
You should end up having a structure like this in `$projectLoc`
+
image::https://raw.githubusercontent.com/schowalter0112/Prints-OASP4j-Tutorial/master/Git%20hub%20client/folder%20structure.jpg[folder structure]
+
. Open `console.bat` and check out the git repositories you need to work on into `workspaces\main`. with the following commands:
+
[source,bash]
-----
cd workspaces/main
git clone --recursive https://github.com/devonfw/my-thai-star.git
-----
+
Do another check whether there are files in folder `workspaces\main\my-thai-star\`!
. Run the script `eclipse-main.bat` to start the Eclipse IDE.
. *In Eclipse* select `File > Import > Maven > Existing Maven Projects` and then choose the cloned projects from your workspace by clicking the `Browse` button and select the folder structure (`workspaces\main\my-thai-star\java\MTSJ`).
. *Execute* the application by starting the ´SpringBootApp´. Select the class and click the right mouse button. In the context menu select the entry `Run as => Java Application` (or `Debug as ...`). The application starts up and creates log entries in the Eclipse Console Tab.
+
image::images/eclipse-run-as.png[width="813", high="390", align="center"]
+
Once started, the backend part of the application runs on http://localhost:8081/mythaistar[]. This is protected by Spring Security, so an additional frontend needs to be started, that will be able to get the needed access tokens.
.  Now switch within command line to `workspaces\main\my-thai-star\angular` and run `yarn install` followed by `yarn start`. Finally 
login with `waiter/waiter` at `http://localhost:4200/restaurant/`.
