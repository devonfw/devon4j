:toc: macro
toc::[]
:idprefix:
:idseparator: -

= 12-factor-app with devon4j

This document mainly focuses on discussing how can you create 12 factor app with devon4j. To know more about this 12 factors you can refer https://12factor.net/[here] . Twelve factor is mainly focus on creating cloud native applications. These are the guidelines on what factors you need to consider in different stages of application lifecycle.



|===
|Factor |Action

|Codebase
|*One codebase tracked in revision control, many deploys* +

One codebase should be created with each process or service.
Twelve factor app says do not share code between application. +
If you must share code, build library and manage that through dependencies. +

To create and manage library in spring boot refer https://spring.io/guides/gs/multi-module/[here]  +
To build your extension in Quarkus refer https://quarkus.io/guides/building-my-first-extension[here] +

For complex monolith application you can consider breaking it into microservices. One of the good article for it is +
https://martinfowler.com/articles/break-monolith-into-microservices.html

This factor mainly points at having seperate commit history for each service or process in case you are using any submodules consider using submodules in your revision control system as well.

|Dependencies
|*Explicitly declare and isolate dependencies*

In devon4j we can declare dependencies in pom.xml.Do not commit any jar files into code repository i.e do not commit agent-jars into repository instead consider using maven-dependency-plugin to manage it. And to isolate app from environment we can dockerize devon4j application.

*References:* +

Dockerize Spring-boot app refer https://spring.io/guides/topicals/spring-boot-docker[here].

Dockerize Quarkus app refer
https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_quarkus_getting-started-quarkus.asciidoc.html#devonfw-guide_devon4j.wiki_quarkus_getting-started-quarkus.asciidoc_create-and-build-a-docker-image[here]

|Config
|https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_guide-configuration.asciidoc.html 

|Backing services
|To design your services, refer devon4j guide https://github.com/devonfw/devon4j/blob/master/documentation/guide-service-layer.asciidoc#jax-rs-configuration 

|Build, release, run
|Build: create executable like jar or docker image

|Processes
|Do not store your states in in-memory cache instead use Redis or Memcached
guide for stateless programming in devon4j +
https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_coding-conventions.asciidoc.html#devonfw-guide_devon4j.wiki_coding-conventions.asciidoc_stateless-programming 

|Port binding
|The web app exports HTTP as a service by binding to a port, and listening to requests coming in on that port.
This is achieved in spring boot application as well as Quarkus. + 
Both have embedded tomcat in it by default so we do not need to deploy explicitly and can be run as standalone application


|Concurrency
|As process in application are stateless it will be easy to scale out application based on requirement.
guide for stateless programming +
https://devonfw.com/website/pages/docs/devonfw-guide_devon4j.wiki_coding-conventions.asciidoc.html#devonfw-guide_devon4j.wiki_coding-conventions.asciidoc_stateless-programming + 
because of stateless processes we can scale out easily.


|Disposability
|Quarkus is designed with container first approach in mind so it has very quick start up time. +
Comparatively spring boot application use more memory and have slow start-up.
For graceful shutdown of web server in spring boot : + 

https://www.baeldung.com/spring-boot-web-server-shutdown

For graceful shutdown in Quarkus refer https://quarkus.io/guides/lifecycle#graceful-shutdown 


|Dev/prod parity
|With docker this can be achieved.
we should have the right processes like continuous integration and delivery to facilitate bridging this gap further.

|Logs
|TODO

|Admin processes
|Create scripts for your admin jobs or consider to create Kubernetes job for this processes.
|===
