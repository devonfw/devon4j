:toc: macro
toc::[]

= Messaging

WARNING: Hey there! Seems like you are still using the documentation of our legacy Java repository. Since it won't be maintained anymore, we recommend you to checkout the new Java page https://devonfw.com/docs/java/current/[here].

Messaging in Java is done using the https://en.wikipedia.org/wiki/Java_Message_Service[JMS] standard from JEE.

== Products

WARNING: Hey there! Seems like you are still using the documentation of our legacy Java repository. Since it won't be maintained anymore, we recommend you to checkout the new Java page https://devonfw.com/docs/java/current/[here].
For messaging you need to choose a JMS provider such as:

* https://www.rabbitmq.com/[RabbitMQ]
* https://activemq.apache.org[ActiveMQ]
* link:guide-oracle.asciidoc#messaging[Oracle Advanced Queuing] (esp. if you already use link:guide-oracle.asciidoc[Oracle RDBMS])

== Receiver

WARNING: Hey there! Seems like you are still using the documentation of our legacy Java repository. Since it won't be maintained anymore, we recommend you to checkout the new Java page https://devonfw.com/docs/java/current/[here].
As a receiver of messages is receiving data from other systems it is located in the link:guide-service-layer.asciidoc[service-layer].

=== JMS Listener

WARNING: Hey there! Seems like you are still using the documentation of our legacy Java repository. Since it won't be maintained anymore, we recommend you to checkout the new Java page https://devonfw.com/docs/java/current/[here].
A `JmsListener` is a class listening and consuming JMS messages. It should carry the suffix `JmsListener` and implement the `MessageListener` interface or have its listener method annotated with `@JmsListener`. This is illustrated by the following example:

[source,java]
----
@Named
@Transactional
public class BookingJmsListener /* implements MessageListener */ {

  @Inject
  private Bookingmanagement bookingmanagement;

  @Inject
  private MessageConverter messageConverter;

  @JmsListener(destination = "BOOKING_QUEUE", containerFactory = "jmsListenerContainerFactory")
  public void onMessage(Message message) {
    try {
      BookingTo bookingTo = (BookingTo) this.messageConverter.fromMessage(message);
      this.bookingmanagement.importBooking(bookingTo);
    } catch (MessageConversionException | JMSException e) {
      throw new InvalidMessageException(message);
    }
  }
}
----

== Sender

WARNING: Hey there! Seems like you are still using the documentation of our legacy Java repository. Since it won't be maintained anymore, we recommend you to checkout the new Java page https://devonfw.com/docs/java/current/[here].

The sending of JMS messages is considered as any other sending of data like link:guide-kafka.asciidoc[kafka] messages or RPC calls via link:guide-rest.asciidoc[REST] using link:guide-service-client.asciidoc[service-client], gRPC, etc.
This will typically happen directly from a link:guide-usecase.asciidoc[use-case] in the link:guide-logic-layer.asciidoc[logic-layer].
However, the technical complexity of the communication and protocols itself shall be hidden from the use-case and not be part of the logic layer.
With spring we can simply use https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jms/core/JmsTemplate.html[JmsTemplate] to do that.
